<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

/**
 * @TableName User
 * @Describe 用户表模型
 * @CreateTime 2019-12-12 15:28:25
 * @Sign 小肥柴
 */
class User extends Model
{
    protected $table = 'users';
    protected $fillable = [
        'name',
        'cover',
        'status',
        'mobile',
        'pinyin',
        'balance',
        'pid',
        'no'
    ];

    static public function addFollow($id)
    {
        $users = User::all()->toArray();
        $user = User::find($id);
        $data = [];

        foreach ($users as $k => $v) {
            if ($v['id'] == $id) {
                continue;
            }
            $data[$v['id']] = [
                'nickname' => $v['name'],
                'pinyin' => $v['pinyin'],
                'cover' => $v['cover'],
            ];
        }

        $user->follow()->sync($data);
    }

    static public function getFollows($where = [], $limit = 0, $offset = 0)
    {
        $user = UserHasFollow::where($where)
            ->with(['follow:id,name,cover'])
            ->limit($limit)
            ->offset($offset)
            ->orderByDesc('created_at')
            ->get()->toArray();
//		if (!empty($user)) {
//			foreach ($user as $k => $v) {
//				$temp = $v['id'];
//				$user[$k]['id'] = $user[$k]['follow_id'];
//				$user[$k]['follow_id'] = $temp;
//			}
//		}
        return $user;
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        self::created(function ($model) {
            if (empty($model->pinyin) && !empty($model->name)) {
                $model->pinyin = Str::upper(pinyin_permalink($model->name));
                $model->save();
            }
        });

        self::updated(function ($model) {
            \DB::table('users')
                ->where('id', $model->id)
                ->update(['pinyin' => Str::upper(pinyin_permalink($model->name))]);
        });
    }

    public function addresses()
    {
        return $this->hasMany(Address::class);
    }

    // 同步收件人历史地址

    public function syncReceiver($data)
    {
        foreach ($data as $k => $v) {
            static $save = [];
            $save[] = new ReceiverRecordAddress($v);
        }
        $this->receiver_address()->saveMany($save);

    }

    // 粉丝-客户

    public function receiver_address()
    {
        return $this->hasMany(ReceiverRecordAddress::class);
    }

    // 客户分组

    public function follow()
    {
        return $this->belongsToMany(User::class, 'user_has_follows', 'user_id', 'follow_id')
            ->withPivot(['id', 'nickname', 'pinyin'])
            ->withTimestamps();
    }

    // 客户手机号

    public function group()
    {
        return $this->hasMany(UserGroup::class)->with('follow');
    }

    public function phone()
    {
        return $this->hasMany(FollowMobile::class);
    }

    public function record()
    {
        return $this->hasOne(UserRecord::class);
    }

    public function config()
    {
        return $this->hasOne(UserConfig::class);
    }

    public function excel()
    {
        return $this->hasMany(ExcelUpload::class);
    }

    // 关注

    public function login_model()
    {
        return $this->hasMany(UserToLoginMode::class, 'user_id');
    }

    public function favorite()
    {
        return $this->belongsToMany(UserHasFollow::class, 'user_has_favorites')
            ->withTimestamps()
            ->withPivot(['nickname', 'pinyin'])
            ->with(['user']);
    }

    public function collection()
    {
        return $this->belongsToMany(Goods::class, 'collections', 'user_id', 'goods_id')->withTimestamps();
    }
    public function myFavorite(){
        return $this->belongsToMany(User::class, 'user_favorites','user_id','favorite_id') ->orderBy('user_favorites.created_at', 'desc')
            ->withTimestamps();;
    }
    protected function serializeDate(\DateTimeInterface $date)
    {
        return $date->format('Y-m-d H:i:s');
    }
    public function parent()
    {
        return $this->hasOne(User::class, 'id', 'pid');
    }
}
